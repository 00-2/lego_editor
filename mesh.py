from OpenGL.GL import *import numpy as npfrom ctypes import c_void_pclass Mesh:    def __init__(self, filename, vao, vbo, size, pin):        with open(filename) as file:            lines = file.readlines()        vt_lines = [line for line in lines if line[0] == 'v' and line[1] == 't']                vertices = np.array([float(part.strip()) for line in lines if line[0] == 'v' and line[1] == ' ' for part in line.split(' ')[1:] if part != ""], dtype="float32")        vertices.resize(len(vertices) // 3, 3)        minValues = vertices.min(axis=0)        maxValues = vertices.max(axis=0)        size[1] += pin        vertices = (vertices + minValues) / (maxValues - minValues) * size + [0.5, 0, 0.5]        size[1] -= pin        vertices = vertices.flatten()                normals = [float(part.strip()) for line in lines if line[0] == 'v' and line[1] == 'n' for part in line.split(' ')[1:] if part != ""]        faces = [int(value) - 1 for line in lines if line[0] == 'f' for part in line.split(' ')[1:] if part != "" for value in part.strip().split('/') if value != ""]        if len(vt_lines) > 0:            faces = np.array(faces)            faces = faces[np.mod(np.arange(faces.size), 3) != 1]        self.faces = faces        result = []        for i in range(len(faces) // 2):            result.append(vertices[3 * faces[2  * i]])            result.append(vertices[3 * faces[2  * i] + 1])            result.append(vertices[3 * faces[2  * i] + 2])            result.append(normals[3 * faces[2  * i + 1]])            result.append(normals[3 * faces[2  * i + 1] + 1])            result.append(normals[3 * faces[2  * i + 1] + 2])        self.result = result        glBindVertexArray(vao)        glBindBuffer(GL_ARRAY_BUFFER, vbo)        glBufferData(GL_ARRAY_BUFFER, np.array(result, dtype="float32"), GL_STATIC_DRAW)        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 24, c_void_p(0))        glEnableVertexAttribArray(0)        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 24, c_void_p(12))        glEnableVertexAttribArray(1)        self.vao = vao        self.count = len(faces) // 2